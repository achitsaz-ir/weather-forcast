#!/usr/bin/env sh

# Load Husky
. "$(dirname -- "$0")/_/husky.sh"

# Function to print error messages and exit
print_error_and_exit() {
  echo "$1"
  exit 1
}

# Function to validate the branch name
validate_branch_name() {
  local branch_name_pattern="^(main|develop|(feature|bugFix|hotFix|issueFix)\/T[0-9]+\-[a-z])"
  local current_branch=$(git branch --show-current)

  if ! echo "$current_branch" | egrep "$branch_name_pattern" > /dev/null; then
    print_error_and_exit "Git branch name validation failed. Valid examples: feature/T20293-camelCaseAddHuskyToProject"
  fi
}

# Function to validate the commit message
validate_commit_message() {
  local commit_msg_pattern="^[🐛|✨|️🚑|🎨|🔒️|⬆️|🚧|🔥|📝]+ \[[0-9]+\] [A-Z]"

  if ! egrep "$commit_msg_pattern" -r .git/COMMIT_EDITMSG > /dev/null; then
    print_error_and_exit "Git message validation failed. Valid examples: 🐛 [20065] Test message"
  fi
}

# Function to run linting and type checking
run_lint_and_type_check() {
  local temp_patch_file="/tmp/patch"
  git diff > "$temp_patch_file"
  git stash --keep-index --include-untracked -m "Autogenerated by Husky"

  local staged_files=$(git diff --diff-filter=ACMRTUXB --name-only --cached -- '.' | sed "s#.##g")

  if ! pnpm eslint $staged_files; then
    git apply "$temp_patch_file" --allow-empty
    print_error_and_exit "ESLint validation failed."
  fi

  if ! pnpm tsc; then
    git apply "$temp_patch_file" --allow-empty
    print_error_and_exit "TypeScript validation failed."
  fi

  git apply "$temp_patch_file" --allow-empty
}

# Main function to encapsulate the script logic
main() {
  validate_branch_name
  validate_commit_message
  run_lint_and_type_check
}

# Run the main function
main